package com.myproj.app.algorithm.图;

/**
 * 题目：
 * 给你一个由 '1'（陆地）和 '0'（水）组成的的二维网格，请你计算网格中岛屿的数量。
 * 岛屿总是被水包围，并且每座岛屿只能由水平方向和/或竖直方向上相邻的陆地连接形成。
 * 此外，你可以假设该网格的四条边均被水包围。
 * 示例 1：
 * 输入：grid = [
 *   ["1","1","1","1","0"],
 *   ["1","1","0","1","0"],
 *   ["1","1","0","0","0"],
 *   ["0","0","0","0","0"]
 * ]
 * 输出：1
 *
 * 思路：
 *      1. 递归：
 *          1.1 注意点： 入参类型是char, 所以判定是否是岛屿 、 修改检索过的岛屿为2， 都要用char类型！！！
 *          1.2 表格类 、 岛屿类的问题的递归： 是通解：
 *                  都是该岛屿坐标 向四周递归。【先污染后治理】， 当前节点递归4次【前后左右节点】
 *                  与二叉树类似， 但二叉树每个节点递归2次【左右节点】
 *          1.3 3个状态：
 *                  0：代表： 水：
 *                  1：代表： 岛屿【未被检索过】
 *                  2：代表： 岛屿【被检索过】
 *
 * @author shenxie
 * @date 2023/12/31
 */
public class 岛屿数量 {

    public static void main(String[] args) {
        System.out.println(numIslands(new char[][]{
                {'1','1','1','1','1','0','1','1','1','1'},
                {'1','0','1','0','1','1','1','1','1','1'},
                {'0','1','1','1','0','1','1','1','1','1'},
                {'1','1','0','1','1','0','0','0','0','1'},
                {'1','0','1','0','1','0','0','1','0','1'},
                {'1','0','0','1','1','1','0','1','0','0'},
                {'0','0','1','0','0','1','1','1','1','0'},
                {'1','0','1','1','1','0','0','1','1','1'},
                {'1','1','1','1','1','1','1','1','0','1'},
                {'1','0','1','1','1','1','1','1','1','0'}}));
    }

    public static int numIslands(char[][] grid) {
        int count = 0;
        for(int i = 0; i<grid.length; i++) {
            for(int j = 0; j < grid[0].length; j++ ){
                if(grid[i][j] == '1') {
                    dfs(grid, i, j);
                    // 直接count ++ 的原因： 检索过的岛屿： 被置为2：检索过了。 所以不满足第一个if的判定。
                    count++;
                }

            }
        }
        return count;
    }

    private static void dfs(char[][] grid, int i, int j) {
        // 是否超过边界：  原则： 先污染后治理！！！， 与二叉树的递归类似
        if(isOverSide(grid, i, j )){
            return ;
        }
        // 判定是否是未被检索过的岛屿
        if(grid[i][j] != '1' ) {
            return ;
        }

        // 是岛屿： 则标记2： 代表： 该岛屿已经被检索过。
        grid[i][j] = '2';

        // 向该坐标的四周递归。
        dfs(grid, i + 1, j);
        dfs(grid, i - 1, j);
        dfs(grid, i, j + 1);
        dfs(grid, i, j - 1);
    }

    private static boolean isOverSide(char[][] grid, int i, int j){
        return i<0||j<0||i>=grid.length||j>=grid[0].length;
    }


}

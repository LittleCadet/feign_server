package com.myproj.app.algorithm.矩阵;

import java.util.HashSet;
import java.util.Set;

/**
 * 题目：
 * 请你判断一个 9 x 9 的数独是否有效。只需要 根据以下规则 ，验证已经填入的数字是否有效即可。
 *
 *     数字 1-9 在每一行只能出现一次。
 *     数字 1-9 在每一列只能出现一次。
 *     数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。（请参考示例图）
 * 注意：
 *     一个有效的数独（部分已被填充）不一定是可解的。
 *     只需要根据以上规则，验证已经填入的数字是否有效即可。
 *     空白格用 '.' 表示。
 * 示例 1：
 * 输入：board =
 * [["5","3",".",".","7",".",".",".","."]
 * ,["6",".",".","1","9","5",".",".","."]
 * ,[".","9","8",".",".",".",".","6","."]
 * ,["8",".",".",".","6",".",".",".","3"]
 * ,["4",".",".","8",".","3",".",".","1"]
 * ,["7",".",".",".","2",".",".",".","6"]
 * ,[".","6",".",".",".",".","2","8","."]
 * ,[".",".",".","4","1","9",".",".","5"]
 * ,[".",".",".",".","8",".",".","7","9"]]
 * 输出：true
 *
 * 思路 ：
 *      1. hashSet: 用于控制元素只出现一次
     *      1. 验证在每一行只出现一次。
     *      2. 验证在每一列只出现一次。
     *      3. 验证在3 * 3小方格中只出现一次。
     *          3.1 难点： 如何表示9个3 * 3的小方格的循环。
     *              解法： 小方格外边界的行： 只有3行：即为0 <= i1 <= 3； 小方格外边界的列： 只有3列,即为0 <= j1 <= 3 。
     *                    小方格内部的行： 只有3行：即为即为 i1 <= i2 <= (i1 + 1)*3; 小方格内部的列： 只有3列： 即为 j1 <= j2 <= (j1 + 1)*3
 *              3.2 注意：一定要注意： i2和 j2的起始位置的表达方式！！！！
 * @author shenxie
 * @date 2023/12/31
 */
public class 有效的数独 {

    public static void main(String[] args) {
        System.out.println(isValidSudoku(new char[][]{{'5','3','.','.','7','.','.','.','.'},
                {'6','.','.','1','9','5','.','.','.'},
                {'.','9','8','.','.','.','.','6','.'},
                {'8','.','.','.','6','.','.','.','3'},
                {'4','.','.','8','.','3','.','.','1'},
                {'7','.','.','.','2','.','.','.','6'},
                {'.','6','.','.','.','.','2','8','.'},
                {'.','.','.','4','1','9','.','.','5'},
                {'.','.','.','.','8','.','.','7','9'}}));
    }

    public static boolean isValidSudoku(char[][] board) {
        Set<Character> set = null;
        // 验证在每一行只出现一次。
        // 行
        for(int i = 0; i< 9; i++) {
            set = new HashSet<>();
            // 列
            for(int j = 0; j<9; j++) {
                if( board[i][j] != '.' && !set.add(board[i][j])) {
                    return false;
                }
            }
        }

        // 验证在每一列只出现一次。
        // 列
        for(int i = 0; i< 9; i++) {
            set = new HashSet<>();
            // 行
            for(int j = 0; j<9; j++) {
                if( board[j][i] != '.' && !set.add(board[j][i])) {
                    return false;
                }
            }
        }


        // 验证在3 * 3小方格中只出现一次。
        // 一个9 * 9的大方格中包含9个3 * 3的小方格
        // 小方格外边界：行
        for(int i1 = 0; i1<3; i1++) {
            // 小方格外边界：列
            for(int j1 = 0; j1<3; j1++) {
                set = new HashSet<>();
                // 小方格内部：行
                // 一定要注意： i2和 j2的起始位置的表达方式！！！！
                for(int i2 = i1 * 3; i2<(i1 + 1) * 3; i2 ++) {
                    // 小方格内部：列
                    for(int j2 = j1 * 3; j2 < (j1 +1) * 3; j2 ++) {
                        if( board[i2][j2] != '.' &&! set.add(board[i2][j2])) {
                            return false;
                        }
                    }
                }
            }
        }
        return true;
    }
}
